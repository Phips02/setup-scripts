#!/bin/bash

# Script de d√©ploiement du prompt personnalis√©
# Auteur: Phips
# Version: 1.1

set -euo pipefail  # Mode strict pour une meilleure gestion d'erreurs

echo "============================================"
echo "üéØ Configuration du prompt personnalis√©"
echo "============================================"

# Couleurs pour les messages
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration du prompt personnalis√©
CUSTOM_PS1='export PS1="\[\e[1;32m\]‚îå‚îÄ‚îÄ(\[\e[m\]\[\e[1;34m\]\u\[\e[m\]\[\e[1;32m\] ‚ñ∫ \[\e[m\]\[\e[1;34m\]\h\[\e[m\]\[\e[1;32m\])-[\[\e[m\]\[\e[38;5;214m\]\w\[\e[m\]\[\e[1;32m\]]\n‚îî‚îÄ\[\e[m\]\[\e[1;37m\]\$ \[\e[0m\]"'

# Fonction de logging uniforme avec le script principal
log() {
    local level="$1"
    shift
    local message="$*"
    
    case "$level" in
        "ERROR")   echo -e "${RED}‚úó $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}‚úì $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}‚ö† $message${NC}" ;;
        "INFO")    echo -e "${BLUE}‚Ñπ $message${NC}" ;;
        *)         echo "$message" ;;
    esac
}

# Fonction de sauvegarde am√©lior√©e
backup_bashrc() {
    if [[ -f ~/.bashrc ]]; then
        local backup_file="$HOME/.bashrc.backup.$(date +%Y%m%d_%H%M%S)"
        if cp ~/.bashrc "$backup_file"; then
            log "SUCCESS" "Sauvegarde cr√©√©e: $backup_file"
            echo "$backup_file" > /tmp/bashrc_backup_location.txt  # Pour r√©f√©rence future
        else
            log "ERROR" "Impossible de cr√©er la sauvegarde"
            exit 1
        fi
    else
        log "INFO" "Aucun fichier .bashrc existant"
    fi
}

# Fonction pour v√©rifier si le prompt existe d√©j√†
check_existing_prompt() {
    if grep -q "Prompt personnalis√© moderne - Setup Scripts" ~/.bashrc 2>/dev/null; then
        log "WARNING" "Un prompt personnalis√© existe d√©j√† dans .bashrc"
        echo -n "Voulez-vous le remplacer ? (y/N): "
        read -r reply
        
        if [[ ! "$reply" =~ ^[Yy]$ ]]; then
            log "INFO" "Installation annul√©e par l'utilisateur"
            exit 0
        fi
        
        # Supprimer tout le bloc du prompt personnalis√© existant
        log "INFO" "Suppression de l'ancien prompt..."
        if awk '
            /^# ============================================$/ && 
            getline && /Prompt personnalis√© moderne - Setup Scripts/ {
                # Ignorer tout jusqu√† la fin du bloc
                while (getline && !/^# ============================================$/) {}
                next
            }
            { print }
        ' ~/.bashrc > ~/.bashrc.tmp && mv ~/.bashrc.tmp ~/.bashrc; then
            log "SUCCESS" "Ancien prompt supprim√©"
        else
            log "ERROR" "Impossible de supprimer l'ancien prompt"
            exit 1
        fi
    fi
}

# Fonction principale d'installation
install_prompt() {
    log "INFO" "Configuration du prompt..."
    
    # Cr√©er le fichier .bashrc s'il n'existe pas
    touch ~/.bashrc
    
    # V√©rifier que l'√©criture est possible
    if [[ ! -w ~/.bashrc ]]; then
        log "ERROR" "Impossible d'√©crire dans ~/.bashrc (permissions)"
        exit 1
    fi
    
    # Ajouter le prompt avec un bloc bien d√©limit√©
    {
        echo ""
        echo "# ============================================"
        echo "# Prompt personnalis√© moderne - Setup Scripts"
        echo "# Couleurs: Vert (bordures) | Bleu (user/host) | Orange (r√©pertoire)"
        echo "# Date d'installation: $(date)"
        echo "# ============================================"
        echo "$CUSTOM_PS1"
        echo "# ============================================"
    } >> ~/.bashrc
    
    log "SUCCESS" "Prompt ajout√© √† ~/.bashrc"
}

# Fonction de test am√©lior√©e
test_prompt() {
    log "INFO" "Test du nouveau prompt..."
    
    # V√©rifier que le prompt a √©t√© ajout√©
    if ! grep -q "‚îå‚îÄ‚îÄ(" ~/.bashrc; then
        log "ERROR" "Le prompt n'a pas √©t√© correctement ajout√©"
        exit 1
    fi
    
    log "SUCCESS" "Prompt configur√© avec succ√®s!"
    
    echo ""
    echo -e "${YELLOW}Aper√ßu de votre nouveau prompt:${NC}"
    echo -e "‚îå‚îÄ‚îÄ(\033[1;34m$(whoami)\033[0m \033[1;32m‚ñ∫\033[0m \033[1;34m$(hostname)\033[0m\033[1;32m)-[\033[38;5;214m$(pwd)\033[1;32m]\033[0m"
    echo -e "\033[1;32m‚îî‚îÄ\033[1;37m\$\033[0m echo 'Hello World!'"
    echo ""
}

# Fonction d'information am√©lior√©e
show_info() {
    echo ""
    echo -e "${BLUE}üìã Informations sur votre prompt:${NC}"
    echo -e "   ‚Ä¢ ${GREEN}Bordures vertes${NC} : style moderne et professionnel"
    echo -e "   ‚Ä¢ ${BLUE}Nom d'utilisateur/hostname en bleu${NC} : optimis√© daltoniens"
    echo -e "   ‚Ä¢ R√©pertoire en ${YELLOW}orange${NC} : excellent contraste"
    echo -e "   ‚Ä¢ Symbole ${GREEN}‚ñ∫${NC} : design moderne et dynamique"
    echo ""
    echo -e "${YELLOW}üí° Conseils d'utilisation:${NC}"
    echo -e "   ‚Ä¢ Pour appliquer imm√©diatement: ${GREEN}source ~/.bashrc${NC}"
    echo -e "   ‚Ä¢ Le prompt sera conserv√© apr√®s red√©marrage"
    echo -e "   ‚Ä¢ Red√©marrez votre terminal pour voir les changements"
    
    # Afficher le chemin de sauvegarde s'il existe
    if [[ -f /tmp/bashrc_backup_location.txt ]]; then
        local backup_location=$(cat /tmp/bashrc_backup_location.txt)
        echo -e "   ‚Ä¢ Pour restaurer l'ancien prompt: ${GREEN}cp $backup_location ~/.bashrc${NC}"
        rm -f /tmp/bashrc_backup_location.txt  # Nettoyer le fichier temporaire
    fi
}

# V√©rification des pr√©requis am√©lior√©e
check_requirements() {
    log "INFO" "V√©rification des pr√©requis..."
    
    # V√©rifier le r√©pertoire HOME
    if [[ ! -d "$HOME" ]]; then
        log "ERROR" "R√©pertoire HOME non trouv√©"
        exit 1
    fi
    
    # V√©rifier les permissions d'√©criture
    if [[ ! -w "$HOME" ]]; then
        log "ERROR" "Pas de permissions d'√©criture dans $HOME"
        exit 1
    fi
    
    # V√©rifier si on est dans un terminal compatible
    if [[ -z "${TERM:-}" ]]; then
        log "WARNING" "Variable TERM non d√©finie, le prompt pourrait ne pas s'afficher correctement"
    fi
    
    # V√©rifier que bash est utilis√©
    if [[ -z "${BASH_VERSION:-}" ]]; then
        log "WARNING" "Ce script est optimis√© pour bash"
    fi
    
    log "SUCCESS" "Pr√©requis valid√©s"
}

# Fonction de nettoyage en cas d'erreur
cleanup_on_error() {
    log "ERROR" "Une erreur est survenue pendant l'installation"
    
    # Restaurer la sauvegarde si elle existe
    if [[ -f /tmp/bashrc_backup_location.txt ]]; then
        local backup_location=$(cat /tmp/bashrc_backup_location.txt)
        if [[ -f "$backup_location" ]]; then
            log "INFO" "Restauration de la sauvegarde..."
            cp "$backup_location" ~/.bashrc
            log "SUCCESS" "Sauvegarde restaur√©e"
        fi
        rm -f /tmp/bashrc_backup_location.txt
    fi
    
    exit 1
}

# Script principal avec gestion d'erreurs
main() {
    # Trap pour g√©rer les erreurs
    trap cleanup_on_error ERR
    
    check_requirements
    backup_bashrc
    check_existing_prompt
    install_prompt
    test_prompt
    show_info
    
    echo ""
    log "SUCCESS" "üéâ Installation termin√©e avec succ√®s!"
    echo -e "${BLUE}üëâ${NC} Pour appliquer imm√©diatement: ${GREEN}source ~/.bashrc${NC}"
    echo -e "${BLUE}üëâ${NC} Ou red√©marrez votre terminal"
}

# Ex√©cution du script principal
main "$@"